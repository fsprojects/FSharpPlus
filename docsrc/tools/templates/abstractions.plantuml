@startuml
skinparam svgDimensionStyle false

together {
	abstract class Semigroup [[http://fsprojects.github.io/FSharpPlus/abstraction-semigroup.html]] {
	  + (+) x y
	}

	abstract class Comonad [[http://fsprojects.github.io/FSharpPlus/abstraction-comonad.html]] {
	  + extract x
	  + (=>>) s g | extend s g
	  ==
	  + duplicate x
	}
}

abstract class Monoid [[http://fsprojects.github.io/FSharpPlus/abstraction-monoid.html]] {
  + zero
  + (+) x y {Appends both monoids}
  ==
  + Seq.sum x
}


abstract class Functor [[http://fsprojects.github.io/FSharpPlus/abstraction-functor.html]] {
  + map f x
  ==
  + unzip x
}

abstract class Contravariant [[http://fsprojects.github.io/FSharpPlus/abstraction-contravariant.html]] {
  + contramap f x
}


abstract class Applicative [[http://fsprojects.github.io/FSharpPlus/abstraction-applicative.html]] {
  + return x
  + (<*>) f x
  ==
  + map f x
  + lift2 f x y
}

abstract class Alternative [[http://fsprojects.github.io/FSharpPlus/abstraction-alternative.html]] {
  + empty
  + (<|>) f x
  ==
  + mfilter p x
}

abstract class ZipApplicative [[http://fsprojects.github.io/FSharpPlus/abstraction-zipapplicative.html]] {
  + pur x
  + (<.>) f x
  ==
  + map f x
  + map2 f x y
}

abstract class Monad [[http://fsprojects.github.io/FSharpPlus/abstraction-monad.html]] {
  + return x
  + (>>=) x f
  ==
  + map f x
  + join x
}


abstract class Bifunctor [[http://fsprojects.github.io/FSharpPlus/abstraction-bifunctor.html]] {
  + {static} bimap f g x
  + first f x
  + second f x
}



abstract class Foldable [[http://fsprojects.github.io/FSharpPlus/abstraction-foldable.html]] {
  {static} + toSeq x
}

abstract class Bifoldable [[http://fsprojects.github.io/FSharpPlus/abstraction-bifoldable.html]] {
  {static} + bifoldMap f g x
  {static} + bifold f g z x
  {static} + bifoldBack f g x z
  + bisum x
}

abstract class Traversable [[http://fsprojects.github.io/FSharpPlus/abstraction-traversable.html]] {
  {static} + traverse f x
  + sequence x
}

abstract class Bitraversable [[http://fsprojects.github.io/FSharpPlus/abstraction-bitraversable.html]] {
  {static} + bitraverse f x
  + bisequence x
}

together {
	abstract class Profunctor [[http://fsprojects.github.io/FSharpPlus/abstraction-profunctor.html]] {
	  + {static} dimap f g x
	  + lmap f x
	  + rmap f x
	}

	abstract class Category [[http://fsprojects.github.io/FSharpPlus/abstraction-category.html]] {
	  + catId
	  + (<<<) f g
	  ==
	  + (>>>) f g
	}
}

abstract class Arrow [[http://fsprojects.github.io/FSharpPlus/abstraction-arrow.html]] {
  + arr f
  + arrFirst f g
  ==
  + arrSecond f g
  + (***) f g
  + (&&&) f g
}



Semigroup  --|> Monoid 
Functor  --|> Bifunctor
Functor  --|> Applicative
Applicative  --|> Monad
Applicative  --|> Alternative
ZipApplicative  --|> Alternative
Monoid ..|> Monad
Monoid ..|> Foldable
Monoid ..|> Bifoldable
Functor --|> Comonad
Functor --|> Traversable
Foldable --|> Traversable
Bifoldable --|> Bitraversable
Applicative ..|> ZipApplicative
Applicative ..|> Bitraversable
Applicative ..|> Traversable
Monoid ..|> Alternative
Functor - Contravariant
(Functor, Contravariant) --|> Profunctor
Profunctor - Category
(Profunctor, Category) --|>  Arrow
@enduml
